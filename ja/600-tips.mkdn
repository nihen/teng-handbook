DBIx::QueryLog と DBIx::Tracer
===============================

今回はデバッグ時に SQL を観察する方法ついてのべます。

## DBIx::QueryLog をつかいこなす

なんだかんだ DBIx::QueryLog は便利です。

    use DBIx::QueryLog;
    my $guard = DBIx::QueryLog->guard();
    ...

と書くだけで、いいかんじにクエリをのぞけるのが便利です。

### 環境変数

以下を指定すると、ログが colorize されます。

    DBIX_QUERYLOG_COLOR=1


以下を指定すると、SQL の無駄な改行が削除されてみやすくなります

    DBIX_QUERYLOG_COMPACT=1

## DBIx::Tracer をつかう

DBIx::Tracer は DBIx::QueryLog のコアをぬきだして汎用的にしたライブラリです。
DBIx::Tracer をつかうと、簡単に DBI のメソッドコールをフックすることができます。

    use DBIx::Tracer;

    my $tracer = DBIx::Tracer->new(
        sub {
            my %args = @_;
            warn $args{sql};
        }
    );

これをつかうと、たとえば以下のような実装が可能になります。

    * テンプレートエンジン内での DBI アクセスを制限する
    * 1回のリクエストの中でのクエリ発行数がおおすぎる場合に警告する

## テンプレートエンジン内での DBI アクセスを制限する

DBIx::Tracer をつかうと、テンプレートエンジンからの DBI アクセスを警告するといったことも可能となります。

`Text::Xslate->current_engine` というメソッドを使うと、Xslate が描画中かどうかがわかるので、これをもちいると以下のように書けます。

    my $tracer = DBIx::Tracer->new(
        sub {
            if (Text::Xslate->current_engine) {
                my %args = @_;
                my $sql = $args{sql};
                warn "Do not execute query in a view: $sql";
                Text::Xslate->print(
                    Text::Xslate::mark_raw('<span style="color: red; font-size: 1.8em;">'),
                    "[[ Do not execute query in a view: $sql ]]",
                    Text::Xslate::mark_raw('</span>')
                );
            }
        }
    );

ビューの中で SQL を発行するのは便利なのですが、以下のような点から最近は禁止した方がいいようにおもっています。

   * 一方でテンプレートをマークアッパーやディレクターなどが変更したさいに SQL の発行回数がすごく増やされたりしてサービスが重くなったりする例がよくある
   * テンプレート内でSQLエラーがおこるとデバッグしづらい
   * プロファイラーで測定しづらくなる
   * テンプレート内で IF などで条件分岐していたりすると、特定の条件のときのみに発行される SQL などがビューにより制御されてしまい、デバッグが困難になる

