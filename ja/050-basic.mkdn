Teng の基本的なつかいかた
=========================

## Teng の構造

Teng のオブジェクトの構造は以下のようになっています。

    Teng has_a Teng::Schema
    Teng has_a DBI
    Teng::Schema has_many Teng::Schema::Table
    Teng::Schema::Table has_a RowClass

画像であらわすと以下のようになります。

![teng class structure](img/teng-class-structure.png)

## サンプルでつかうスキーマ

今回のサンプルでつかうスキーマは以下のものです。

    create table user (
        id     integer NOT NULL auto_increment,
        name   varchar(255) NOT NULL,
        PRIMARY KEY (id)
    );

    create table bookmark (
        id      int(10) NOT NULL auto_increment,
        user_id int(10) NOT NULL,
        url     text NOT NULL,
        PRIMARY KEY (id),
        INDEX (user_id),
        FOREIGN KEY (user_id) REFERENCES user(id)
    );

## スキーマクラスを定義する

スキーマクラスは以下のように定義します。

    package Neko::Schema;
    use strict;
    use warnings;
    use Teng::Schema::Declare;

    table 'user' => sub {
        pk 'id';
        columns qw/id name/;
    };

    table 'bookmark' => sub {
        pk 'id';
        columns qw/id user_id url/;
    };

    1;

スキーマクラスの詳細については後述します。

## DB クラスを定義する

作らなくてもつかえるのですが、プラグインをつかいたいので定義します。

ここでは Teng::Plugin::Count と Teng::Plugin::Pager をロードしておきましょう。

    package Neko;
    use parent qw/Teng/;
    __PACKAGE__->load_plugin(qw/Count/);
    __PACKAGE__->load_plugin(qw/Pager/);
    1;

## つかってみる

Teng のインスタンスをつくります。

    use Neko::Schema;
    use Neko;

    my $db = Neko->new(
        connect_info => [
            'dbi:SQLite::memory:', '', ''
        ],
        schema => Neko::Schema->instance(),
    );

`connect_info` にわたすのは DBI にわたすものとおなじです。

## 基本的なデータオペレーション

さて、Teng を実際につかってみましょう。

insert したい
-------------

insert は Teng#insert メソッドで発行します。

    $db->insert('user' => {id => 1, name => 'nekokak'});

発行されるクエリは以下のものです。
    
    INSERT INTO user (id, name) VALUES (1,'nekokak');

Teng#insert メソッドは insert したデータの object をかえすために INSERT したあとに SELECT を発行することに注意してください。

### fast_insert

`Teng->insert` は、INSERT したデータを SELECT でとりなおすため、低速です。
INSERT しっぱなしでオブジェクトが必要ない場合には `$db->fast_insert` メソッドをかわりに使うとよいです。

    my $last_insert_id = $db->fast_insert('user' => {id => 1, name => 'nekokak'});

SELECT を発行する
-----------------

SELECT を発行するには search メソッドを発行します。

    my @users = $db->search('user' => {});

発行される SQL は以下のものです。

    SELECT * FROM user;

search メソッドの第２引数で WHERE 句を指定できます。SELECT 句の組み立ては SQL::Maker というモジュールが担当しているので、詳細は SQL::Maker のマニュアルをみるとよいでしょう。

ただし、SQL::Maker のマニュアルをみなければわからないほど複雑なクエリをとりあつかいたい場合には、SQL を直でかいた方がいい場合が多いです。
Teng では SQL を直でたたいた場合のとりあつかいも簡単なので、ごちゃごちゃと SQL::Maker でやるぐらいなら SQL を書きましょう。

### コンテキストと search メソッド

search メソッドは list コンテキストだと全部のデータをリストでかえし、scalar コンテキストだとイテレータをかえします。
イテレータは膨大な量のデータをとりあつかうときには便利ですが、実際には膨大な量のデータをとりあつかうときはちょっとずつデータを paging しながらとりだす場合が多いですし、ほとんどの場合はリストでとれば十分です。

scalar コンテキストでとりあつかう場合のイテレータのとりあつかいを以下にしめします。

    my $iter = $db->search('user' => {});
    while (my $user = $iter->next) {
        say $user->name;
    }

list コンテキストの場合には以下のようにシンプルになります。

    my @users = $db->search('user' => {});
    for my $user (@users) {
        say $user->name;
    }

### WHERE 句の記述

Teng は SQL::Maker を使用していますので、かなり複雑な WHERE 句の記述ができます。
ただ、もちろん複雑な SQL を発行するときは素直に SQL を書いたほうがいいことはいうまでもありません。

#### IN

`id IN (1,2)` のように検索したいときは以下のようにする。

    $db->search(user => { id => [1,2] });

#### NOT IN

NOT IN は以下のように記述できます。

    $db->search(user => { id => {"not in' => [1,2] }});

#### BETWEEN

    $db->search(user => {id => {'between' => ['1','2']}});

#### LIKE

    $db->search(user => {name => {'like' => 'xaic%'}});

#### 同一カラムの OR での検索

以下のように検索できる。

    $db->search(user => {id => [{'>' => 3},{'<' => 7}]});

#### 同一カラムの AND での検索

    $db->search(user => {id => [-and => [{'>' => 3},{'<' => 7}]]});

#### サブクエリ

ナント、サブクエリまで発行することができます。あまり利用をおすすめはしませんが(笑)

    $db->search(user => {id => {IN => \['SELECT user_id FROM bookmark WHERE url=?','http://mixi.jp']}});

### ページングしたい

Teng::Plugin::Pager をロードしておけば、以下のようにつかえます。

    my ($rows, $pager) = $db->search_with_pager('user', {}, {page => 1, rows => 10});

$rows は行オブジェクトの ArrayRef です。$pager は Data::Page::NoTotalEntries のインタンスです。

### count したい

ユーザー数を集計する。

    my $count = $db->count('user');

ユーザー名が nomaneko な人をさがす。

    my $count = $db->count('user' => {name => 'nomaneko'});

ユーザー名が noma はじまりの人をさがす。

    my $count = $db->count('user' => {name => {like => 'noma%'}});

UPDATE したい
-------------

UPDATE 文を発行するには二種類の方法があります。

### SELECT した行から UPDATE する

すでに選択した Row オブジェクトにたいして UPDATE 文を発行するパターンです。
Row オブジェクトから PRIMARY KEY を選択するための WHERE 句が生成され、対象行にたいして UPDATE がおこなわれます。

    my $row = $db->single(user => {id => 1});
    $row->update({name => 'John'});

アクセサで値を設定してから UPDATE することもできます。

    my $row = $db->single(user => {id => 1});
    $row->name('john');
    $row->update();

### UPDATE 文を直接うちこむ

以下のように、UPDATE 文を直接うちこむこともできます。

    $db->update(
        'user' => {
            name => 'nomaneko',
        }, {
            id => 1,
        }
    );

この場合、UPDATE 文の生成結果は以下のようになります。

    UPDATE user SET name="nomaneko" WHERE id=1;

## リレーションシップ

Teng にはリレーションシップをサポートする機能は意図的に削られているので自分で実装する必要があります。

### ブックマークからユーザーをひけるようにする

行オブジェクトに fetch\_user メソッドを追加します。

    package Neko::Row::Bookmark;
    use parent qw/Teng::Row/;
    sub fetch_user {
        my $self = shift;
        $self->handle->single(user => { id => $self->user_id });
    }
    1;

としておいて

    my $bookmark = $db->single('bookmark', {id => 1});
    say $bookmark->fetch_user->name;

### ユーザーからブックマークをひけるようにする

行オブジェクトに search\_bookmark メソッドを追加。

    package Neko::Row::User;
    use parent qw/Teng::Row/;
    sub search_bookmark {
        my ($self, $where, @args) = @_;
        $where->{user_id} = $self->user_id;
        $self->handle->search(bookmark => $where, @args);
    }
    1;

としておいて

    my $user = $db->single('user' => {id => 1});
    say $_->url for $user->search_bookmarks();

